// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nop.Data;

namespace Nop.Data.Migrations
{
    [DbContext(typeof(NopObjectContext))]
    partial class NopObjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Nop.Core.Domain.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Company");

                    b.Property<int?>("CountryId");

                    b.Property<string>("County");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("CustomAttributes");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("StateProvinceId");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.AddressAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("AddressAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.AddressAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressAttributeId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("AddressAttributeId");

                    b.ToTable("AddressAttributeValue");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.GenericAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("KeyGroup")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("GenericAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.SearchTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<string>("Keyword");

                    b.HasKey("Id");

                    b.ToTable("SearchTerm");
                });

            modelBuilder.Entity("Nop.Core.Domain.Configuration.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumericIsoCode");

                    b.Property<bool>("Published");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasMaxLength(3);

                    b.Property<string>("TwoLetterIsoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Published");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("FlagImageFileName")
                        .HasMaxLength(50);

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Published");

                    b.Property<bool>("Rtl");

                    b.Property<string>("UniqueSeoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.LocaleStringResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ResourceValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocaleStringResource");
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.LocalizedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LocaleValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityLogTypeId");

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int?>("EntityId");

                    b.Property<string>("EntityName")
                        .HasMaxLength(400);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.ActivityLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ActivityLogType");
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("FullMessage");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<int>("LogLevelId");

                    b.Property<string>("PageUrl");

                    b.Property<string>("ReferrerUrl");

                    b.Property<string>("ShortMessage")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Nop.Core.Domain.Media.Download", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType");

                    b.Property<byte[]>("DownloadBinary");

                    b.Property<Guid>("DownloadGuid");

                    b.Property<string>("DownloadUrl");

                    b.Property<string>("Extension");

                    b.Property<string>("Filename");

                    b.Property<bool>("IsNew");

                    b.Property<bool>("UseDownloadUrl");

                    b.HasKey("Id");

                    b.ToTable("Download");
                });

            modelBuilder.Entity("Nop.Core.Domain.Media.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltAttribute");

                    b.Property<bool>("IsNew");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("SeoFilename")
                        .HasMaxLength(300);

                    b.Property<string>("TitleAttribute");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("Nop.Core.Domain.Media.PictureBinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BinaryData");

                    b.Property<int>("PictureId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("PictureBinary");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("DontSendBeforeDateUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<int>("UserRoleId");

                    b.HasKey("Id");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("EnableSsl");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Port");

                    b.Property<bool>("UseDefaultCredentials");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EmailAccount");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachedDownloadId");

                    b.Property<string>("BccEmailAddresses")
                        .HasMaxLength(200);

                    b.Property<string>("Body");

                    b.Property<int?>("DelayBeforeSend");

                    b.Property<int>("DelayPeriodId");

                    b.Property<int>("EmailAccountId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("MessageTemplate");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.NewsLetterSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid>("NewsLetterSubscriptionGuid");

                    b.HasKey("Id");

                    b.ToTable("NewsLetterSubscription");
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.QueuedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachedDownloadId");

                    b.Property<string>("AttachmentFileName");

                    b.Property<string>("AttachmentFilePath");

                    b.Property<string>("Bcc")
                        .HasMaxLength(500);

                    b.Property<string>("Body");

                    b.Property<string>("CC")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("DontSendBeforeDateUtc");

                    b.Property<int>("EmailAccountId");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("FromName")
                        .HasMaxLength(500);

                    b.Property<int>("PriorityId");

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(500);

                    b.Property<string>("ReplyToName")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("SentOnUtc");

                    b.Property<int>("SentTries");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ToName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("QueuedEmail");
                });

            modelBuilder.Entity("Nop.Core.Domain.Notification.QueuedNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachedDownloadId");

                    b.Property<string>("AttachmentFileName");

                    b.Property<string>("AttachmentFilePath");

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime?>("DontSendBeforeDateUtc");

                    b.Property<string>("ObserverIdentifier");

                    b.Property<int>("PriorityId");

                    b.Property<DateTime?>("SentOnUtc");

                    b.Property<int>("SentTries");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.Property<string>("UserIds");

                    b.HasKey("Id");

                    b.ToTable("QueuedNotification");
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.AclRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("AclRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.PermissionRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PermissionRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.PermissionRecordUserRoleMapping", b =>
                {
                    b.Property<int>("PermissionRecordId")
                        .HasColumnName("PermissionRecord_Id");

                    b.Property<int>("UserRoleId")
                        .HasColumnName("UserRole_Id");

                    b.HasKey("PermissionRecordId", "UserRoleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("PermissionRecord_Role_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Seo.UrlRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("IsActive");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("UrlRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Tasks.ScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastEndUtc");

                    b.Property<DateTime?>("LastStartUtc");

                    b.Property<DateTime?>("LastSuccessUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Seconds");

                    b.Property<bool>("StopOnError");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ScheduleTask");
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.ExternalAuthenticationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("ExternalDisplayIdentifier");

                    b.Property<string>("ExternalIdentifier");

                    b.Property<string>("OAuthAccessToken");

                    b.Property<string>("OAuthToken");

                    b.Property<string>("ProviderSystemName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalAuthenticationRecord");
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AdminComment");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(1000);

                    b.Property<string>("EmailToRevalidate")
                        .HasMaxLength(1000);

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<bool>("IsSystemAccount");

                    b.Property<DateTime>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<bool>("RequireReLogin");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400);

                    b.Property<Guid>("UserGuid");

                    b.Property<string>("Username")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserAddressMapping", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("User_Id");

                    b.Property<int>("AddressId")
                        .HasColumnName("Address_Id");

                    b.HasKey("UserId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("UserAttribute");
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("UserAttributeId");

                    b.HasKey("Id");

                    b.HasIndex("UserAttributeId");

                    b.ToTable("UserAttributeValue");
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Password");

                    b.Property<int>("PasswordFormatId");

                    b.Property<string>("PasswordSalt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPassword");
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("EnablePasswordLifetime");

                    b.Property<bool>("IsSystemRole");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SystemName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserUserRoleMapping", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("User_Id");

                    b.Property<int>("UserRoleId")
                        .HasColumnName("UserRole_Id");

                    b.HasKey("UserId", "UserRoleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User_UserRole_Mapping");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.Address", b =>
                {
                    b.HasOne("Nop.Core.Domain.Directory.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Nop.Core.Domain.Directory.StateProvince", "StateProvince")
                        .WithMany()
                        .HasForeignKey("StateProvinceId");
                });

            modelBuilder.Entity("Nop.Core.Domain.Common.AddressAttributeValue", b =>
                {
                    b.HasOne("Nop.Core.Domain.Common.AddressAttribute", "AddressAttribute")
                        .WithMany("AddressAttributeValues")
                        .HasForeignKey("AddressAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Directory.StateProvince", b =>
                {
                    b.HasOne("Nop.Core.Domain.Directory.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.LocaleStringResource", b =>
                {
                    b.HasOne("Nop.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Localization.LocalizedProperty", b =>
                {
                    b.HasOne("Nop.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.HasOne("Nop.Core.Domain.Logging.ActivityLogType", "ActivityLogType")
                        .WithMany()
                        .HasForeignKey("ActivityLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Logging.Log", b =>
                {
                    b.HasOne("Nop.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Media.PictureBinary", b =>
                {
                    b.HasOne("Nop.Core.Domain.Media.Picture", "Picture")
                        .WithOne("PictureBinary")
                        .HasForeignKey("Nop.Core.Domain.Media.PictureBinary", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Messages.QueuedEmail", b =>
                {
                    b.HasOne("Nop.Core.Domain.Messages.EmailAccount", "EmailAccount")
                        .WithMany()
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.AclRecord", b =>
                {
                    b.HasOne("Nop.Core.Domain.Users.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Security.PermissionRecordUserRoleMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Security.PermissionRecord", "PermissionRecord")
                        .WithMany("PermissionRecordUserRoleMappings")
                        .HasForeignKey("PermissionRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Users.UserRole", "UserRole")
                        .WithMany("PermissionRecordUserRoleMappings")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.ExternalAuthenticationRecord", b =>
                {
                    b.HasOne("Nop.Core.Domain.Users.User", "User")
                        .WithMany("ExternalAuthenticationRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserAddressMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Users.User", "User")
                        .WithMany("UserAddressMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserAttributeValue", b =>
                {
                    b.HasOne("Nop.Core.Domain.Users.UserAttribute", "UserAttribute")
                        .WithMany("UserAttributeValues")
                        .HasForeignKey("UserAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserPassword", b =>
                {
                    b.HasOne("Nop.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nop.Core.Domain.Users.UserUserRoleMapping", b =>
                {
                    b.HasOne("Nop.Core.Domain.Users.User", "User")
                        .WithMany("UserUserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nop.Core.Domain.Users.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
